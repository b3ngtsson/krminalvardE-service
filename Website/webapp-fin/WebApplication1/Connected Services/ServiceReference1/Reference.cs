//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApplication1.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Blankett", Namespace="http://schemas.datacontract.org/2004/07/BlankettService")]
    [System.SerializableAttribute()]
    public partial class Blankett : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EMailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FormIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int InmateSSNField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PersonOfInterestFNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PersonOfInterestLNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PhoneNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VisitorFNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VisitorLNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EMail {
            get {
                return this.EMailField;
            }
            set {
                if ((object.ReferenceEquals(this.EMailField, value) != true)) {
                    this.EMailField = value;
                    this.RaisePropertyChanged("EMail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FormId {
            get {
                return this.FormIdField;
            }
            set {
                if ((this.FormIdField.Equals(value) != true)) {
                    this.FormIdField = value;
                    this.RaisePropertyChanged("FormId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int InmateSSN {
            get {
                return this.InmateSSNField;
            }
            set {
                if ((this.InmateSSNField.Equals(value) != true)) {
                    this.InmateSSNField = value;
                    this.RaisePropertyChanged("InmateSSN");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PersonOfInterestFName {
            get {
                return this.PersonOfInterestFNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PersonOfInterestFNameField, value) != true)) {
                    this.PersonOfInterestFNameField = value;
                    this.RaisePropertyChanged("PersonOfInterestFName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PersonOfInterestLName {
            get {
                return this.PersonOfInterestLNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PersonOfInterestLNameField, value) != true)) {
                    this.PersonOfInterestLNameField = value;
                    this.RaisePropertyChanged("PersonOfInterestLName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PhoneNumber {
            get {
                return this.PhoneNumberField;
            }
            set {
                if ((this.PhoneNumberField.Equals(value) != true)) {
                    this.PhoneNumberField = value;
                    this.RaisePropertyChanged("PhoneNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VisitorFName {
            get {
                return this.VisitorFNameField;
            }
            set {
                if ((object.ReferenceEquals(this.VisitorFNameField, value) != true)) {
                    this.VisitorFNameField = value;
                    this.RaisePropertyChanged("VisitorFName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VisitorLName {
            get {
                return this.VisitorLNameField;
            }
            set {
                if ((object.ReferenceEquals(this.VisitorLNameField, value) != true)) {
                    this.VisitorLNameField = value;
                    this.RaisePropertyChanged("VisitorLName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IBlankettService1")]
    public interface IBlankettService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBlankettService1/SaveForm", ReplyAction="http://tempuri.org/IBlankettService1/SaveFormResponse")]
        string SaveForm(WebApplication1.ServiceReference1.Blankett b1);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBlankettService1/SaveForm", ReplyAction="http://tempuri.org/IBlankettService1/SaveFormResponse")]
        System.Threading.Tasks.Task<string> SaveFormAsync(WebApplication1.ServiceReference1.Blankett b1);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBlankettService1/CreateAccount", ReplyAction="http://tempuri.org/IBlankettService1/CreateAccountResponse")]
        string CreateAccount(WebApplication1.ServiceReference1.Blankett b1);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBlankettService1/CreateAccount", ReplyAction="http://tempuri.org/IBlankettService1/CreateAccountResponse")]
        System.Threading.Tasks.Task<string> CreateAccountAsync(WebApplication1.ServiceReference1.Blankett b1);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBlankettService1/UpdateForm", ReplyAction="http://tempuri.org/IBlankettService1/UpdateFormResponse")]
        void UpdateForm(WebApplication1.ServiceReference1.Blankett b1);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBlankettService1/UpdateForm", ReplyAction="http://tempuri.org/IBlankettService1/UpdateFormResponse")]
        System.Threading.Tasks.Task UpdateFormAsync(WebApplication1.ServiceReference1.Blankett b1);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBlankettService1/GetForms", ReplyAction="http://tempuri.org/IBlankettService1/GetFormsResponse")]
        WebApplication1.ServiceReference1.Blankett[] GetForms();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBlankettService1/GetForms", ReplyAction="http://tempuri.org/IBlankettService1/GetFormsResponse")]
        System.Threading.Tasks.Task<WebApplication1.ServiceReference1.Blankett[]> GetFormsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBlankettService1/ChangeStatusForm", ReplyAction="http://tempuri.org/IBlankettService1/ChangeStatusFormResponse")]
        void ChangeStatusForm(WebApplication1.ServiceReference1.Blankett b1, string newStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBlankettService1/ChangeStatusForm", ReplyAction="http://tempuri.org/IBlankettService1/ChangeStatusFormResponse")]
        System.Threading.Tasks.Task ChangeStatusFormAsync(WebApplication1.ServiceReference1.Blankett b1, string newStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBlankettService1/VerifyAccount", ReplyAction="http://tempuri.org/IBlankettService1/VerifyAccountResponse")]
        bool VerifyAccount(string inputUsername, string inputPass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBlankettService1/VerifyAccount", ReplyAction="http://tempuri.org/IBlankettService1/VerifyAccountResponse")]
        System.Threading.Tasks.Task<bool> VerifyAccountAsync(string inputUsername, string inputPass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBlankettService1/CreateInamate", ReplyAction="http://tempuri.org/IBlankettService1/CreateInamateResponse")]
        bool CreateInamate(string inmateFirstname, string InmateSurname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBlankettService1/CreateInamate", ReplyAction="http://tempuri.org/IBlankettService1/CreateInamateResponse")]
        System.Threading.Tasks.Task<bool> CreateInamateAsync(string inmateFirstname, string InmateSurname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBlankettService1/GetFormWithId", ReplyAction="http://tempuri.org/IBlankettService1/GetFormWithIdResponse")]
        WebApplication1.ServiceReference1.Blankett GetFormWithId(int formId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBlankettService1/GetFormWithId", ReplyAction="http://tempuri.org/IBlankettService1/GetFormWithIdResponse")]
        System.Threading.Tasks.Task<WebApplication1.ServiceReference1.Blankett> GetFormWithIdAsync(int formId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBlankettService1/CheckStatusWithUsername", ReplyAction="http://tempuri.org/IBlankettService1/CheckStatusWithUsernameResponse")]
        bool CheckStatusWithUsername(string un);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBlankettService1/CheckStatusWithUsername", ReplyAction="http://tempuri.org/IBlankettService1/CheckStatusWithUsernameResponse")]
        System.Threading.Tasks.Task<bool> CheckStatusWithUsernameAsync(string un);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBlankettService1/SaveAvailableTimeToDB", ReplyAction="http://tempuri.org/IBlankettService1/SaveAvailableTimeToDBResponse")]
        bool SaveAvailableTimeToDB(string date, string time);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBlankettService1/SaveAvailableTimeToDB", ReplyAction="http://tempuri.org/IBlankettService1/SaveAvailableTimeToDBResponse")]
        System.Threading.Tasks.Task<bool> SaveAvailableTimeToDBAsync(string date, string time);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBlankettService1/GetAvailableTime", ReplyAction="http://tempuri.org/IBlankettService1/GetAvailableTimeResponse")]
        string[] GetAvailableTime();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBlankettService1/GetAvailableTime", ReplyAction="http://tempuri.org/IBlankettService1/GetAvailableTimeResponse")]
        System.Threading.Tasks.Task<string[]> GetAvailableTimeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBlankettService1/GetAllBookedTimes", ReplyAction="http://tempuri.org/IBlankettService1/GetAllBookedTimesResponse")]
        string[] GetAllBookedTimes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBlankettService1/GetAllBookedTimes", ReplyAction="http://tempuri.org/IBlankettService1/GetAllBookedTimesResponse")]
        System.Threading.Tasks.Task<string[]> GetAllBookedTimesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBlankettService1/BookTime", ReplyAction="http://tempuri.org/IBlankettService1/BookTimeResponse")]
        string BookTime(string date, string time, string user, int inmateSSN);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBlankettService1/BookTime", ReplyAction="http://tempuri.org/IBlankettService1/BookTimeResponse")]
        System.Threading.Tasks.Task<string> BookTimeAsync(string date, string time, string user, int inmateSSN);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBlankettService1/UnbookTime", ReplyAction="http://tempuri.org/IBlankettService1/UnbookTimeResponse")]
        string UnbookTime(string date, string time, string user, int inmateSSN);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBlankettService1/UnbookTime", ReplyAction="http://tempuri.org/IBlankettService1/UnbookTimeResponse")]
        System.Threading.Tasks.Task<string> UnbookTimeAsync(string date, string time, string user, int inmateSSN);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBlankettService1/CheckIfFull", ReplyAction="http://tempuri.org/IBlankettService1/CheckIfFullResponse")]
        bool CheckIfFull(string date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBlankettService1/CheckIfFull", ReplyAction="http://tempuri.org/IBlankettService1/CheckIfFullResponse")]
        System.Threading.Tasks.Task<bool> CheckIfFullAsync(string date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBlankettService1/GetBooktimeWithId", ReplyAction="http://tempuri.org/IBlankettService1/GetBooktimeWithIdResponse")]
        string[] GetBooktimeWithId(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBlankettService1/GetBooktimeWithId", ReplyAction="http://tempuri.org/IBlankettService1/GetBooktimeWithIdResponse")]
        System.Threading.Tasks.Task<string[]> GetBooktimeWithIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBlankettService1/VerifyAdminAccount", ReplyAction="http://tempuri.org/IBlankettService1/VerifyAdminAccountResponse")]
        bool VerifyAdminAccount(string inputUsername, string inputPass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBlankettService1/VerifyAdminAccount", ReplyAction="http://tempuri.org/IBlankettService1/VerifyAdminAccountResponse")]
        System.Threading.Tasks.Task<bool> VerifyAdminAccountAsync(string inputUsername, string inputPass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBlankettService1/GetFormIdFromUsername", ReplyAction="http://tempuri.org/IBlankettService1/GetFormIdFromUsernameResponse")]
        int GetFormIdFromUsername(string s);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBlankettService1/GetFormIdFromUsername", ReplyAction="http://tempuri.org/IBlankettService1/GetFormIdFromUsernameResponse")]
        System.Threading.Tasks.Task<int> GetFormIdFromUsernameAsync(string s);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBlankettService1/GetUserIdWithUsername", ReplyAction="http://tempuri.org/IBlankettService1/GetUserIdWithUsernameResponse")]
        int GetUserIdWithUsername(string s);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBlankettService1/GetUserIdWithUsername", ReplyAction="http://tempuri.org/IBlankettService1/GetUserIdWithUsernameResponse")]
        System.Threading.Tasks.Task<int> GetUserIdWithUsernameAsync(string s);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBlankettService1/GetBookedTimeWithUserId", ReplyAction="http://tempuri.org/IBlankettService1/GetBookedTimeWithUserIdResponse")]
        string[] GetBookedTimeWithUserId(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBlankettService1/GetBookedTimeWithUserId", ReplyAction="http://tempuri.org/IBlankettService1/GetBookedTimeWithUserIdResponse")]
        System.Threading.Tasks.Task<string[]> GetBookedTimeWithUserIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBlankettService1/GetInmateSSNWIthUsername", ReplyAction="http://tempuri.org/IBlankettService1/GetInmateSSNWIthUsernameResponse")]
        string GetInmateSSNWIthUsername(string un);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBlankettService1/GetInmateSSNWIthUsername", ReplyAction="http://tempuri.org/IBlankettService1/GetInmateSSNWIthUsernameResponse")]
        System.Threading.Tasks.Task<string> GetInmateSSNWIthUsernameAsync(string un);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBlankettService1Channel : WebApplication1.ServiceReference1.IBlankettService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BlankettService1Client : System.ServiceModel.ClientBase<WebApplication1.ServiceReference1.IBlankettService1>, WebApplication1.ServiceReference1.IBlankettService1 {
        
        public BlankettService1Client() {
        }
        
        public BlankettService1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BlankettService1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BlankettService1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BlankettService1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string SaveForm(WebApplication1.ServiceReference1.Blankett b1) {
            return base.Channel.SaveForm(b1);
        }
        
        public System.Threading.Tasks.Task<string> SaveFormAsync(WebApplication1.ServiceReference1.Blankett b1) {
            return base.Channel.SaveFormAsync(b1);
        }
        
        public string CreateAccount(WebApplication1.ServiceReference1.Blankett b1) {
            return base.Channel.CreateAccount(b1);
        }
        
        public System.Threading.Tasks.Task<string> CreateAccountAsync(WebApplication1.ServiceReference1.Blankett b1) {
            return base.Channel.CreateAccountAsync(b1);
        }
        
        public void UpdateForm(WebApplication1.ServiceReference1.Blankett b1) {
            base.Channel.UpdateForm(b1);
        }
        
        public System.Threading.Tasks.Task UpdateFormAsync(WebApplication1.ServiceReference1.Blankett b1) {
            return base.Channel.UpdateFormAsync(b1);
        }
        
        public WebApplication1.ServiceReference1.Blankett[] GetForms() {
            return base.Channel.GetForms();
        }
        
        public System.Threading.Tasks.Task<WebApplication1.ServiceReference1.Blankett[]> GetFormsAsync() {
            return base.Channel.GetFormsAsync();
        }
        
        public void ChangeStatusForm(WebApplication1.ServiceReference1.Blankett b1, string newStatus) {
            base.Channel.ChangeStatusForm(b1, newStatus);
        }
        
        public System.Threading.Tasks.Task ChangeStatusFormAsync(WebApplication1.ServiceReference1.Blankett b1, string newStatus) {
            return base.Channel.ChangeStatusFormAsync(b1, newStatus);
        }
        
        public bool VerifyAccount(string inputUsername, string inputPass) {
            return base.Channel.VerifyAccount(inputUsername, inputPass);
        }
        
        public System.Threading.Tasks.Task<bool> VerifyAccountAsync(string inputUsername, string inputPass) {
            return base.Channel.VerifyAccountAsync(inputUsername, inputPass);
        }
        
        public bool CreateInamate(string inmateFirstname, string InmateSurname) {
            return base.Channel.CreateInamate(inmateFirstname, InmateSurname);
        }
        
        public System.Threading.Tasks.Task<bool> CreateInamateAsync(string inmateFirstname, string InmateSurname) {
            return base.Channel.CreateInamateAsync(inmateFirstname, InmateSurname);
        }
        
        public WebApplication1.ServiceReference1.Blankett GetFormWithId(int formId) {
            return base.Channel.GetFormWithId(formId);
        }
        
        public System.Threading.Tasks.Task<WebApplication1.ServiceReference1.Blankett> GetFormWithIdAsync(int formId) {
            return base.Channel.GetFormWithIdAsync(formId);
        }
        
        public bool CheckStatusWithUsername(string un) {
            return base.Channel.CheckStatusWithUsername(un);
        }
        
        public System.Threading.Tasks.Task<bool> CheckStatusWithUsernameAsync(string un) {
            return base.Channel.CheckStatusWithUsernameAsync(un);
        }
        
        public bool SaveAvailableTimeToDB(string date, string time) {
            return base.Channel.SaveAvailableTimeToDB(date, time);
        }
        
        public System.Threading.Tasks.Task<bool> SaveAvailableTimeToDBAsync(string date, string time) {
            return base.Channel.SaveAvailableTimeToDBAsync(date, time);
        }
        
        public string[] GetAvailableTime() {
            return base.Channel.GetAvailableTime();
        }
        
        public System.Threading.Tasks.Task<string[]> GetAvailableTimeAsync() {
            return base.Channel.GetAvailableTimeAsync();
        }
        
        public string[] GetAllBookedTimes() {
            return base.Channel.GetAllBookedTimes();
        }
        
        public System.Threading.Tasks.Task<string[]> GetAllBookedTimesAsync() {
            return base.Channel.GetAllBookedTimesAsync();
        }
        
        public string BookTime(string date, string time, string user, int inmateSSN) {
            return base.Channel.BookTime(date, time, user, inmateSSN);
        }
        
        public System.Threading.Tasks.Task<string> BookTimeAsync(string date, string time, string user, int inmateSSN) {
            return base.Channel.BookTimeAsync(date, time, user, inmateSSN);
        }
        
        public string UnbookTime(string date, string time, string user, int inmateSSN) {
            return base.Channel.UnbookTime(date, time, user, inmateSSN);
        }
        
        public System.Threading.Tasks.Task<string> UnbookTimeAsync(string date, string time, string user, int inmateSSN) {
            return base.Channel.UnbookTimeAsync(date, time, user, inmateSSN);
        }
        
        public bool CheckIfFull(string date) {
            return base.Channel.CheckIfFull(date);
        }
        
        public System.Threading.Tasks.Task<bool> CheckIfFullAsync(string date) {
            return base.Channel.CheckIfFullAsync(date);
        }
        
        public string[] GetBooktimeWithId(int id) {
            return base.Channel.GetBooktimeWithId(id);
        }
        
        public System.Threading.Tasks.Task<string[]> GetBooktimeWithIdAsync(int id) {
            return base.Channel.GetBooktimeWithIdAsync(id);
        }
        
        public bool VerifyAdminAccount(string inputUsername, string inputPass) {
            return base.Channel.VerifyAdminAccount(inputUsername, inputPass);
        }
        
        public System.Threading.Tasks.Task<bool> VerifyAdminAccountAsync(string inputUsername, string inputPass) {
            return base.Channel.VerifyAdminAccountAsync(inputUsername, inputPass);
        }
        
        public int GetFormIdFromUsername(string s) {
            return base.Channel.GetFormIdFromUsername(s);
        }
        
        public System.Threading.Tasks.Task<int> GetFormIdFromUsernameAsync(string s) {
            return base.Channel.GetFormIdFromUsernameAsync(s);
        }
        
        public int GetUserIdWithUsername(string s) {
            return base.Channel.GetUserIdWithUsername(s);
        }
        
        public System.Threading.Tasks.Task<int> GetUserIdWithUsernameAsync(string s) {
            return base.Channel.GetUserIdWithUsernameAsync(s);
        }
        
        public string[] GetBookedTimeWithUserId(int id) {
            return base.Channel.GetBookedTimeWithUserId(id);
        }
        
        public System.Threading.Tasks.Task<string[]> GetBookedTimeWithUserIdAsync(int id) {
            return base.Channel.GetBookedTimeWithUserIdAsync(id);
        }
        
        public string GetInmateSSNWIthUsername(string un) {
            return base.Channel.GetInmateSSNWIthUsername(un);
        }
        
        public System.Threading.Tasks.Task<string> GetInmateSSNWIthUsernameAsync(string un) {
            return base.Channel.GetInmateSSNWIthUsernameAsync(un);
        }
    }
}
